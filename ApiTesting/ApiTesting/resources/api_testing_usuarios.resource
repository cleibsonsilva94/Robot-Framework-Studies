## EXPLICA√á√ÉO DAS FUN√á√ïES USADAS NA PARTE INFERIOR (linha 100)
*** Settings ***
Library  RequestsLibrary
Library  String
Library  Collections

*** Keywords ***
Criar um usu√°rio novo
    ${palavra_aleatoria}  Generate Random String  length=4  chars=[LETTERS] 
    ${palavra_aleatoria}  Convert To Lower Case   ${palavra_aleatoria}
    Set Test Variable     ${EMAIL_TESTE}  ${palavra_aleatoria}@emailteste.com
    Log  ${EMAIL_TESTE}
    Log To Console  ${EMAIL_TESTE} 

Cadastrar o usu√°rio criado na ServeRest
    [Arguments]  ${email}  ${status_code_desejado}
    ${body}  Create Dictionary
    ...      nome=Fulano da Silva
    ...      email=${email}
    ...      password=1234
    ...      administrador=true   
    Log   ${body}
    
    Criar Sess√£o na ServeRest

    ${resposta}  POST On Session
    ...          alias=ServeRest
    ...          url=/usuarios
    ...          json=${body}
    ...          expected_status=${status_code_desejado}

    Log  ${resposta.json()}
    
    IF  ${resposta.status_code} == 201
        Set Test Variable    ${ID_USUARIO}  ${resposta.json()["_id"]}
    END

    Set Test Variable    ${RESPOSTA}    ${resposta.json()}

Criar Sess√£o na ServeRest
    ${headers}  Create Dictionary  accept=application/json  Content-Type=application/json
    Create Session    alias=ServeRest    url=https://serverest.dev   headers=${headers}

Conferir se o usu√°rio foi cadastrado corretamente
    Log  ${RESPOSTA}
    Dictionary Should Contain Item  ${RESPOSTA}  message  Cadastro realizado com sucesso
    Dictionary Should Contain Key   ${RESPOSTA}  _id

Vou repetir o cadastro do usu√°rio
    Cadastrar o usu√°rio criado na ServeRest  email=${EMAIL_TESTE}  status_code_desejado=400

Verificar se a API n√£o permitiu o cadastro repetido
    Dictionary Should Contain Item    ${RESPOSTA}    message    Este email j√° est√° sendo usado

Consultar os dados do novo usu√°rio
    ${resposta_consulta}  GET On Session  alias=ServeRest  url=/usuarios/${ID_USUARIO}  expected_status=200
   
    # Obtendo as propriedades do objeto response
    Log   ${resposta_consulta.status_code}
    Log   ${resposta_consulta.reason}
    Log   ${resposta_consulta.headers}
    Log   ${resposta_consulta.elapsed}
    Log   ${resposta_consulta.text}
    Log   ${resposta_consulta.json()}
    
    Set Test Variable     ${RESP_CONSULTA}  ${resposta_consulta.json()}

Conferir os dados retornados
    Log   ${RESP_CONSULTA}
    Dictionary Should Contain Item    ${RESP_CONSULTA}    nome            Fulano da Silva
    Dictionary Should Contain Item    ${RESP_CONSULTA}    email           ${EMAIL_TESTE}
    Dictionary Should Contain Item    ${RESP_CONSULTA}    password        1234
    Dictionary Should Contain Item    ${RESP_CONSULTA}    administrador   true
    Dictionary Should Contain Item    ${RESP_CONSULTA}    _id             ${ID_USUARIO}


























# *** Explica√ß√£o da Primeira Keyword (linhas 08 a 14)***

# ## Keyword: Gera√ß√£o de string aleat√≥ria e cria√ß√£o de e-mail
# 1. `${palavra_aleatoria}  Generate Random String  length=4  chars=[LETTERS]`
#    - **Fun√ß√£o:** `Generate Random String`
#    - **Origem:** Biblioteca `String`
#    - **O que faz:** Gera uma string aleat√≥ria com tamanho definido.  
#    - **Par√¢metros usados:**
#      - `length=4` ‚Üí o tamanho da string ser√° de 4 caracteres.  
#      - `chars=[LETTERS]` ‚Üí define que s√≥ ser√£o usadas letras (A-Z).  
#    - **Exemplo de sa√≠da:** `"ABCD"`, `"WXYZ"`.

# 2. `${palavra_aleatoria}  Convert To Lower Case   ${palavra_aleatoria}`
#    - **Fun√ß√£o:** `Convert To Lower Case`
#    - **Origem:** Biblioteca `String`
#    - **O que faz:** Converte o conte√∫do de uma string para letras min√∫sculas.  
#    - **Exemplo de entrada:** `"ABCD"` ‚Üí **sa√≠da:** `"abcd"`.

# 3. `Set Test Variable     ${EMAIL_TESTE}  ${palavra_aleatoria}@emailteste.com`
#    - **Fun√ß√£o:** `Set Test Variable`
#    - **Origem:** BuiltIn (fun√ß√£o interna do Robot Framework)
#    - **O que faz:** Cria uma vari√°vel no n√≠vel de teste que pode ser usada em qualquer parte do caso de teste.  
#    - **Exemplo:** Se `${palavra_aleatoria}` = `"abcd"`, ent√£o `${EMAIL_TESTE}` ser√° `"abcd@emailteste.com"`.

# *** Explica√ß√£o da Keyword: Cadastrar o usu√°rio criado na ServeRest (linhas 26 a 39) ***

# - `Criar Sess√£o na ServeRest`
#   ‚ûù Chama a keyword respons√°vel por configurar a sess√£o de comunica√ß√£o com a API.

# - `## Abaixo ele est√° criando uma nova sess√£o, s√≥ que para enviar dados via POST.`
#   ‚ûù Coment√°rio que explica que a a√ß√£o seguinte √© uma requisi√ß√£o POST.

# - `${resposta}  POST On Session`
#   ‚ûù Executa uma requisi√ß√£o POST na sess√£o `ServeRest` e guarda o retorno na vari√°vel `${resposta}`.

# - `... alias=ServeRest`
#   ‚ûù Informa que a sess√£o usada ser√° a que tem o alias `ServeRest`.

# - `... url=/usuarios`
#   ‚ûù Endpoint da API utilizado para cadastrar novos usu√°rios.

# - `... json=${body}`
#   ‚ûù Define o corpo da requisi√ß√£o em formato JSON, contendo nome, email, senha e administrador.

# - `... expected_status=${status_code_desejado}`
#   ‚ûù Define qual status HTTP a resposta deve ter (por exemplo: 201 para sucesso).

# - `Log  ${resposta.json()}`
#   ‚ûù Exibe no log o conte√∫do JSON retornado pela API.

# - `IF  ${resposta.status_code} == 201`
#     `Set Test Variable    ${ID_USUARIO}  ${resposta.json()["_id"]}`
#   ‚ûù Se o status for 201 (criado com sucesso), guarda o ID do usu√°rio criado na vari√°vel `${ID_USUARIO}`.

# - `Set Test Variable    ${RESPOSTA}    ${resposta.json()}`
#   ‚ûù Salva toda a resposta JSON da API na vari√°vel `${RESPOSTA}` para ser reutilizada depois.


# ======================================================================
# üìå O QUE √â UMA API E SEUS PRINCIPAIS ELEMENTOS
# ======================================================================

# üîπ O que √© uma API?
# - API significa **Application Programming Interface** (Interface de Programa√ß√£o de Aplica√ß√µes).
# - √â como um "gar√ßom de restaurante": voc√™ faz um pedido (requisi√ß√£o) e a API leva at√© a cozinha (servidor),
#   depois retorna com a comida pronta (resposta).
# - Em resumo, √© um conjunto de regras que permite a comunica√ß√£o entre sistemas diferentes.

# üîπ Principais Elementos de uma API:

# 1. **Endpoint**
#    - √â o endere√ßo (URL) que indica o recurso que voc√™ quer acessar.
#    - Exemplo: `https://serverest.dev/usuarios`
#    - Analogia: √© como o n√∫mero da mesa no restaurante para o gar√ßom saber onde entregar o pedido.

# 2. **M√©todos HTTP**
#    - Definem a a√ß√£o que voc√™ deseja realizar no recurso.
#    - Principais:
#        - `GET` ‚Üí Consultar dados.
#        - `POST` ‚Üí Criar um novo recurso.
#        - `PUT` ‚Üí Atualizar um recurso existente.
#        - `DELETE` ‚Üí Excluir um recurso.
#    - Analogia: √© como dizer ao gar√ßom se voc√™ quer **pedir algo novo**, **alterar um prato** ou **cancelar**.

# 3. **Headers (cabe√ßalhos)**
#    - S√£o informa√ß√µes adicionais que v√£o junto com a requisi√ß√£o.
#    - Exemplos:
#        - `Content-Type: application/json` ‚Üí informa que o corpo est√° em JSON.
#        - `Authorization: Bearer <token>` ‚Üí usado para autentica√ß√£o.
#    - Analogia: √© como dar instru√ß√µes ao gar√ßom, por exemplo "sem cebola", "trazer r√°pido".

# 4. **Body (corpo da requisi√ß√£o)**
#    - Onde voc√™ envia os dados quando cria ou atualiza algo.
#    - Exemplo em JSON:
#        ```json
#        {
#           "nome": "Fulano da Silva",
#           "email": "fulano@email.com",
#           "password": "1234",
#           "administrador": true
#        }
#        ```
#    - Analogia: √© como a lista dos ingredientes que voc√™ deseja no prato.

# 5. **Status Code (c√≥digo de status HTTP)**
#    - Indica o resultado da requisi√ß√£o.
#    - Exemplos:
#        - `200` ‚Üí Sucesso (OK).
#        - `201` ‚Üí Criado com sucesso.
#        - `400` ‚Üí Erro do cliente (requisi√ß√£o inv√°lida).
#        - `401` ‚Üí N√£o autorizado.
#        - `404` ‚Üí Recurso n√£o encontrado.
#        - `500` ‚Üí Erro interno no servidor.
#    - Analogia: √© como o gar√ßom voltar dizendo "pedido pronto", "n√£o temos esse prato", ou "cozinha com problema".

# 6. **Response (resposta)**
#    - √â o retorno enviado pela API ap√≥s processar a requisi√ß√£o.
#    - Geralmente cont√©m:
#        - **Status code**
#        - **Headers**
#        - **Body** com os dados solicitados ou mensagem.
#    - Analogia: √© o prato que chega na mesa depois do pedido.

# ======================================================================
# ‚úÖ Resumindo:
# Uma API √© o meio de comunica√ß√£o entre sistemas.  
# Voc√™ manda uma **requisi√ß√£o** (pedido) para um **endpoint** com **headers** e possivelmente um **body**.  
# O servidor processa e responde com um **status code** e uma **resposta (response)**.  